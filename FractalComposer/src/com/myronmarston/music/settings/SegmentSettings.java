package com.myronmarston.music.settings;

import org.simpleframework.xml.*;

/**
 * Contains some settings that apply to an arbitrary group of notes.  For example,
 * when pitch self-similarity is applied to a germ with an accidental, the segment
 * generated for the accidental will be assigned a SegmentSettings object with
 * a chromatic adjustment for the whole segment.
 * 
 * @author Myron
 */
@Root
public class SegmentSettings {
    @Attribute
    private int chromaticAdjustment;        
    
    /**
     * Gets the chromatic adjustment for this segment.
     * 
     * @return the chromatic adjustment for this segment; positive is sharps, 
     *         negative is flats
     */
    public int getChromaticAdjustment() {
        return chromaticAdjustment;
    }

    /**
     * Sets the chromatic adjustment for this segment.
     * 
     * @param chromaticAdjustment the chromatic adjustment for this segment; 
     *        positive is sharps, negative is flats 
     */
    public void setChromaticAdjustment(int chromaticAdjustment) {
        this.chromaticAdjustment = chromaticAdjustment;
    }    

    /**
     * Constructor.
     * 
     * @param chromaticAdjustment the chromatic adjustment for this segment; 
     *        positive is sharps, negative is flats 
     */
    public SegmentSettings(int chromaticAdjustment) {
        this.chromaticAdjustment = chromaticAdjustment;
    }

    // equals and hashcode have been generated by Netbeans IDE.
    
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final SegmentSettings other = (SegmentSettings) obj;
        if (this.chromaticAdjustment != other.chromaticAdjustment) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 97 * hash + this.chromaticAdjustment;
        return hash;
    }        
}
