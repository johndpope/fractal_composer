package com.myronmarston.music;

/**
 * Represents a note, relative to a particular scale.
 * The note doesn't know or care what scale is being used, but to get a concrete
 * MidiNote, the scale must be used to convert it.
 * @author Myron
 */
public class Note {
    private int scaleStep; //0 = tonic, 7 = octave, 9 = third an octave above, etc.
    private int octave; //which octave the note should be in.  0 begins the first octave in Midi that contains the tonic.
    private int chromaticAdjustment; //-2...2.  If this is an accidental, the number of half steps to adjust it from the diatonic scale note.
    private double duration; //how long the note should last, in quarter notes.
    private int volume = MidiNote.DEFAULT_VELOCITY; //how loud the note should be on a scale from 0 to 127.
    private boolean rest = false; // true if this note should be a rest.
    
    public Note() {}
            
    public Note(int scaleStep, int octave, int chromaticAdjustment, double duration, int volume) {
        this.scaleStep = scaleStep;
        this.octave = octave;
        this.chromaticAdjustment = chromaticAdjustment;
        this.setDuration(duration);
        this.volume = volume;
    }
    
    // Copy constructor
    public Note(Note inputNote) {
        this(inputNote.getScaleStep(), inputNote.getOctave(), inputNote.getChromaticAdjustment(), inputNote.getDuration(), inputNote.getVolume());
        this.rest = inputNote.isRest();
    }
    
    static public Note createRest(double duration) {
        Note rest = new Note();
        
        rest.rest = true;
        rest.setDuration(duration); // use the setter so we get an exception if the duration is 0
        rest.volume = 0; 
        rest.scaleStep = 0;
        rest.octave = 0;
        
        return rest;
    }

    public int getScaleStep() {
        return scaleStep;
    }

    public void setScaleStep(int scaleStep) {        
        throwUnsupportedOperationExceptionIfRest("scaleStep");
        this.scaleStep = scaleStep;        
    }

    public int getOctave() {
        return octave;
    }

    public void setOctave(int octave) {
        throwUnsupportedOperationExceptionIfRest("octave");
        this.octave = octave;        
    }

    public int getChromaticAdjustment() {
        return chromaticAdjustment;
    }

    public void setChromaticAdjustment(int chromaticAdjustment) {
        throwUnsupportedOperationExceptionIfRest("chromaticAdjustment");
        this.chromaticAdjustment = chromaticAdjustment;
    }

    public double getDuration() {
        return duration;
    }

    public void setDuration(double duration) {
        if (duration <= 0) throw new IllegalArgumentException("The duration must be greater than zero.");
        this.duration = duration;
    }

    public int getVolume() {
        return volume;
    }

    public void setVolume(int volume) {
        throwUnsupportedOperationExceptionIfRest("volume");
        this.volume = volume;                
    }
    
    public boolean isRest() {
        return rest;
    }    
    
    protected void throwUnsupportedOperationExceptionIfRest(String changingField) {
        if (this.isRest()) {
            throw new UnsupportedOperationException(String.format("The Note is a rest.  The %s field cannot be changed on a rest.", changingField));
        }
    }
    
    // equals and hashCode have been auto-generated by NetBeans.
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Note other = (Note) obj;
        if (this.scaleStep != other.scaleStep) {
            return false;
        }
        if (this.octave != other.octave) {
            return false;
        }
        if (this.chromaticAdjustment != other.chromaticAdjustment) {
            return false;
        }
        if (this.duration != other.duration) {
            return false;
        }
        if (this.volume != other.volume) {
            return false;
        }
        if (this.rest != other.rest) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 79 * hash + this.scaleStep;
        hash = 79 * hash + this.octave;
        hash = 79 * hash + this.chromaticAdjustment;
        hash = 79 * hash + (int) (Double.doubleToLongBits(this.duration) ^ (Double.doubleToLongBits(this.duration) >>> 32));
        hash = 79 * hash + this.volume;
        hash = 79 * hash + (this.rest ? 1 : 0);
        return hash;
    }
}
